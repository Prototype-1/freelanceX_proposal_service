// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proposal.proto

package proposal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProposalService_CreateProposal_FullMethodName            = "/proposal.ProposalService/CreateProposal"
	ProposalService_GetProposalByID_FullMethodName           = "/proposal.ProposalService/GetProposalByID"
	ProposalService_UpdateProposal_FullMethodName            = "/proposal.ProposalService/UpdateProposal"
	ProposalService_SaveTemplate_FullMethodName              = "/proposal.ProposalService/SaveTemplate"
	ProposalService_GetTemplatesForFreelancer_FullMethodName = "/proposal.ProposalService/GetTemplatesForFreelancer"
	ProposalService_ListProposals_FullMethodName             = "/proposal.ProposalService/ListProposals"
)

// ProposalServiceClient is the client API for ProposalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProposalServiceClient interface {
	CreateProposal(ctx context.Context, in *CreateProposalRequest, opts ...grpc.CallOption) (*CreateProposalResponse, error)
	GetProposalByID(ctx context.Context, in *GetProposalRequest, opts ...grpc.CallOption) (*GetProposalResponse, error)
	UpdateProposal(ctx context.Context, in *UpdateProposalRequest, opts ...grpc.CallOption) (*UpdateProposalResponse, error)
	SaveTemplate(ctx context.Context, in *SaveTemplateRequest, opts ...grpc.CallOption) (*SaveTemplateResponse, error)
	GetTemplatesForFreelancer(ctx context.Context, in *GetTemplatesRequest, opts ...grpc.CallOption) (*GetTemplatesResponse, error)
	ListProposals(ctx context.Context, in *ListProposalsRequest, opts ...grpc.CallOption) (*ListProposalsResponse, error)
}

type proposalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProposalServiceClient(cc grpc.ClientConnInterface) ProposalServiceClient {
	return &proposalServiceClient{cc}
}

func (c *proposalServiceClient) CreateProposal(ctx context.Context, in *CreateProposalRequest, opts ...grpc.CallOption) (*CreateProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProposalResponse)
	err := c.cc.Invoke(ctx, ProposalService_CreateProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) GetProposalByID(ctx context.Context, in *GetProposalRequest, opts ...grpc.CallOption) (*GetProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProposalResponse)
	err := c.cc.Invoke(ctx, ProposalService_GetProposalByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) UpdateProposal(ctx context.Context, in *UpdateProposalRequest, opts ...grpc.CallOption) (*UpdateProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProposalResponse)
	err := c.cc.Invoke(ctx, ProposalService_UpdateProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) SaveTemplate(ctx context.Context, in *SaveTemplateRequest, opts ...grpc.CallOption) (*SaveTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTemplateResponse)
	err := c.cc.Invoke(ctx, ProposalService_SaveTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) GetTemplatesForFreelancer(ctx context.Context, in *GetTemplatesRequest, opts ...grpc.CallOption) (*GetTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplatesResponse)
	err := c.cc.Invoke(ctx, ProposalService_GetTemplatesForFreelancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) ListProposals(ctx context.Context, in *ListProposalsRequest, opts ...grpc.CallOption) (*ListProposalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProposalsResponse)
	err := c.cc.Invoke(ctx, ProposalService_ListProposals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposalServiceServer is the server API for ProposalService service.
// All implementations must embed UnimplementedProposalServiceServer
// for forward compatibility.
type ProposalServiceServer interface {
	CreateProposal(context.Context, *CreateProposalRequest) (*CreateProposalResponse, error)
	GetProposalByID(context.Context, *GetProposalRequest) (*GetProposalResponse, error)
	UpdateProposal(context.Context, *UpdateProposalRequest) (*UpdateProposalResponse, error)
	SaveTemplate(context.Context, *SaveTemplateRequest) (*SaveTemplateResponse, error)
	GetTemplatesForFreelancer(context.Context, *GetTemplatesRequest) (*GetTemplatesResponse, error)
	ListProposals(context.Context, *ListProposalsRequest) (*ListProposalsResponse, error)
	mustEmbedUnimplementedProposalServiceServer()
}

// UnimplementedProposalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProposalServiceServer struct{}

func (UnimplementedProposalServiceServer) CreateProposal(context.Context, *CreateProposalRequest) (*CreateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProposal not implemented")
}
func (UnimplementedProposalServiceServer) GetProposalByID(context.Context, *GetProposalRequest) (*GetProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByID not implemented")
}
func (UnimplementedProposalServiceServer) UpdateProposal(context.Context, *UpdateProposalRequest) (*UpdateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProposal not implemented")
}
func (UnimplementedProposalServiceServer) SaveTemplate(context.Context, *SaveTemplateRequest) (*SaveTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTemplate not implemented")
}
func (UnimplementedProposalServiceServer) GetTemplatesForFreelancer(context.Context, *GetTemplatesRequest) (*GetTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplatesForFreelancer not implemented")
}
func (UnimplementedProposalServiceServer) ListProposals(context.Context, *ListProposalsRequest) (*ListProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposals not implemented")
}
func (UnimplementedProposalServiceServer) mustEmbedUnimplementedProposalServiceServer() {}
func (UnimplementedProposalServiceServer) testEmbeddedByValue()                         {}

// UnsafeProposalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProposalServiceServer will
// result in compilation errors.
type UnsafeProposalServiceServer interface {
	mustEmbedUnimplementedProposalServiceServer()
}

func RegisterProposalServiceServer(s grpc.ServiceRegistrar, srv ProposalServiceServer) {
	// If the following call pancis, it indicates UnimplementedProposalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProposalService_ServiceDesc, srv)
}

func _ProposalService_CreateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).CreateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_CreateProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).CreateProposal(ctx, req.(*CreateProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_GetProposalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).GetProposalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_GetProposalByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).GetProposalByID(ctx, req.(*GetProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_UpdateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).UpdateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_UpdateProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).UpdateProposal(ctx, req.(*UpdateProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_SaveTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).SaveTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_SaveTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).SaveTemplate(ctx, req.(*SaveTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_GetTemplatesForFreelancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).GetTemplatesForFreelancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_GetTemplatesForFreelancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).GetTemplatesForFreelancer(ctx, req.(*GetTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_ListProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).ListProposals(ctx, req.(*ListProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProposalService_ServiceDesc is the grpc.ServiceDesc for ProposalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProposalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proposal.ProposalService",
	HandlerType: (*ProposalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProposal",
			Handler:    _ProposalService_CreateProposal_Handler,
		},
		{
			MethodName: "GetProposalByID",
			Handler:    _ProposalService_GetProposalByID_Handler,
		},
		{
			MethodName: "UpdateProposal",
			Handler:    _ProposalService_UpdateProposal_Handler,
		},
		{
			MethodName: "SaveTemplate",
			Handler:    _ProposalService_SaveTemplate_Handler,
		},
		{
			MethodName: "GetTemplatesForFreelancer",
			Handler:    _ProposalService_GetTemplatesForFreelancer_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _ProposalService_ListProposals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proposal.proto",
}
